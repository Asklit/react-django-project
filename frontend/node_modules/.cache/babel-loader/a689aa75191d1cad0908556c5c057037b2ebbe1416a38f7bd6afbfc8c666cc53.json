{"ast":null,"code":"var _jsxFileName = \"C:\\\\data\\\\projects\\\\JSX\\\\reactProject\\\\frontend\\\\src\\\\Components\\\\AdminPanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from '../styles/AdminPanel.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminPanel() {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [admins, setAdmins] = useState([]);\n  const [words, setWords] = useState([]);\n  const [newUser, setNewUser] = useState({\n    username: ''\n  });\n  const [newAdmin, setNewAdmin] = useState({\n    username: ''\n  });\n  const [newWord, setNewWord] = useState({\n    word: ''\n  });\n  const [activeTab, setActiveTab] = useState('users');\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const update = async () => {\n    fetch('http://localhost:8000/api/list/users').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      setData(data);\n      setLoading(false);\n    }).catch(error => {\n      setError(error);\n      setLoading(false);\n    });\n  };\n  update();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data && data.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: user.name\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this) // Предполагая, что у пользователя есть id и name\n    )\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n\n  // console.log(data)\n\n  // useEffect(() => {\n  //   // Загрузка пользователей, админов и слов из API (здесь можно заменить на реальные запросы)\n  //   setUsers([{ id: 1, username: 'user1' }, { id: 2, username: 'user2' }]);\n  //   setAdmins([{ id: 1, username: 'admin1' }, { id: 2, username: 'admin2' }]);\n  //   setWords([{ id: 1, word: 'word1' }, { id: 2, word: 'word2' }]);\n  // }, []);\n\n  // const handleSubmit = async (event, type) => {\n  //   event.preventDefault();\n  //   let newData;\n  //   if (type === 'user') {\n  //     try {\n  //       const response = await fetch('/users/', {\n  //         method: 'POST',\n  //         headers: {\n  //           'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify(newUser)\n  //       });\n  //       if (!response.ok) throw new Error('Network response was not ok');\n  //       const user = await response.json();\n  //       setUsers([...users, user]);\n  //       setNewUser({ username: '' });\n  //     } catch (error) {\n  //       console.error('There has been a problem with your fetch operation:', error);\n  //     }\n  //   } else if (type === 'admin') {\n  //     try {\n  //       const response = await fetch('/admins/', {\n  //         method: 'POST',\n  //         headers: {\n  //           'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify(newAdmin)\n  //       });\n  //       if (!response.ok) throw new Error('Network response was not ok');\n  //       const admin = await response.json();\n  //       setAdmins([...admins, admin]);\n  //       setNewAdmin({ username: '' });\n  //     } catch (error) {\n  //       console.error('There has been a problem with your fetch operation:', error);\n  //     }\n  //   } else if (type === 'word') {\n  //     try {\n  //       const response = await fetch('/words/', {\n  //         method: 'POST',\n  //         headers: {\n  //           'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify(newWord)\n  //       });\n  //       if (!response.ok) throw new Error('Network response was not ok');\n  //       const word = await response.json();\n  //       setWords([...words, word]);\n  //       setNewWord({ word: '' });\n  //     } catch (error) {\n  //       console.error('There has been a problem with your fetch operation:', error);\n  //     }\n  //   }\n  // };\n\n  // return (\n  //   <div className={styles.container}>\n  //     <h2>Admin Panel</h2>\n  //     <div className={styles.tabs}>\n  //       <button className={`${styles.tab} ${activeTab === 'users' ? styles.active : ''}`} onClick={() => setActiveTab('users')}>Users</button>\n  //       <button className={`${styles.tab} ${activeTab === 'admins' ? styles.active : ''}`} onClick={() => setActiveTab('admins')}>Admins</button>\n  //       <button className={`${styles.tab} ${activeTab === 'words' ? styles.active : ''}`} onClick={() => setActiveTab('words')}>Words</button>\n  //     </div>\n\n  //     {activeTab === 'users' && (\n  //       <>\n  //         <form onSubmit={(e) => handleSubmit(e, 'user')} className={styles.form}>\n  //           <input\n  //             type=\"text\"\n  //             name=\"username\"\n  //             placeholder=\"Username\"\n  //             value={newUser.username}\n  //             onChange={(e) => setNewUser({ username: e.target.value })}\n  //             className={styles.input}\n  //           />\n  //           <button type=\"submit\" className={styles.button}>Add User</button>\n  //         </form>\n  //         <table className={styles.table}>\n  //           <thead>\n  //             <tr>\n  //               <th>ID</th>\n  //               <th>Username</th>\n  //               <th>Actions</th>\n  //             </tr>\n  //           </thead>\n  //           <tbody>\n  //             {users.map(user => (\n  //               <tr key={user.id}>\n  //                 <td>{user.id}</td>\n  //                 <td>{user.username}</td>\n  //                 <td>\n  //                   <button className={styles.actionButton}>Edit</button>\n  //                   <button className={styles.actionButton}>Delete</button>\n  //                 </td>\n  //               </tr>\n  //             ))}\n  //           </tbody>\n  //         </table>\n  //       </>\n  //     )}\n\n  //     {activeTab === 'admins' && (\n  //       <>\n  //         <form onSubmit={(e) => handleSubmit(e, 'admin')} className={styles.form}>\n  //           <input\n  //             type=\"text\"\n  //             name=\"username\"\n  //             placeholder=\"Username\"\n  //             value={newAdmin.username}\n  //             onChange={(e) => setNewAdmin({ username: e.target.value })}\n  //             className={styles.input}\n  //           />\n  //           <button type=\"submit\" className={styles.button}>Add Admin</button>\n  //         </form>\n  //         <table className={styles.table}>\n  //           <thead>\n  //             <tr>\n  //               <th>ID</th>\n  //               <th>Username</th>\n  //               <th>Actions</th>\n  //             </tr>\n  //           </thead>\n  //           <tbody>\n  //             {admins.map(admin => (\n  //               <tr key={admin.id}>\n  //                 <td>{admin.id}</td>\n  //                 <td>{admin.username}</td>\n  //                 <td>\n  //                   <button className={styles.actionButton}>Edit</button>\n  //                   <button className={styles.actionButton}>Delete</button>\n  //                 </td>\n  //               </tr>\n  //             ))}\n  //           </tbody>\n  //         </table>\n  //       </>\n  //     )}\n\n  //     {activeTab === 'words' && (\n  //       <>\n  //         <form onSubmit={(e) => handleSubmit(e, 'word')} className={styles.form}>\n  //           <input\n  //             type=\"text\"\n  //             name=\"word\"\n  //             placeholder=\"Word\"\n  //             value={newWord.word}\n  //             onChange={(e) => setNewWord({ word: e.target.value })}\n  //             className={styles.input}\n  //           />\n  //           <button type=\"submit\" className={styles.button}>Add Word</button>\n  //         </form>\n  //         <table className={styles.table}>\n  //           <thead>\n  //             <tr>\n  //               <th>ID</th>\n  //               <th>Word</th>\n  //               <th>Actions</th>\n  //             </tr>\n  //           </thead>\n  //           <tbody>\n  //             {words.map(word => (\n  //               <tr key={word.id}>\n  //                 <td>{word.id}</td>\n  //                 <td>{word.word}</td>\n  //                 <td>\n  //                   <button className={styles.actionButton}>Edit</button>\n  //                   <button className={styles.actionButton}>Delete</button>\n  //                 </td>\n  //               </tr>\n  //             ))}\n  //           </tbody>\n  //         </table>\n  //       </>\n  //     )}\n  //   </div>\n  // );\n}\n_s(AdminPanel, \"7ACH+T7ijr06FVWd0Sj8TdW4EYY=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useState","useEffect","styles","jsxDEV","_jsxDEV","AdminPanel","_s","users","setUsers","admins","setAdmins","words","setWords","newUser","setNewUser","username","newAdmin","setNewAdmin","newWord","setNewWord","word","activeTab","setActiveTab","data","setData","loading","setLoading","error","setError","update","fetch","then","response","ok","Error","json","catch","children","map","user","name","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/data/projects/JSX/reactProject/frontend/src/Components/AdminPanel.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styles from '../styles/AdminPanel.module.css';\r\n\r\nfunction AdminPanel() {\r\n  const [users, setUsers] = useState([]);\r\n  const [admins, setAdmins] = useState([]);\r\n  const [words, setWords] = useState([]);\r\n\r\n  const [newUser, setNewUser] = useState({ username: '' });\r\n  const [newAdmin, setNewAdmin] = useState({ username: '' });\r\n  const [newWord, setNewWord] = useState({ word: '' });\r\n\r\n  const [activeTab, setActiveTab] = useState('users');\r\n\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const update = async () => {\r\n    fetch('http://localhost:8000/api/list/users')\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            setData(data);\r\n            setLoading(false);\r\n        })\r\n        .catch(error => {\r\n            setError(error);\r\n            setLoading(false);\r\n        });\r\n  }\r\n\r\n  update();\r\n\r\n  return (\r\n    <div>\r\n        {data && data.map(user => (\r\n            <div key={user.id}>{user.name}</div> // Предполагая, что у пользователя есть id и name\r\n        ))}\r\n    </div>\r\n  );\r\n\r\n  // console.log(data)\r\n  \r\n  // useEffect(() => {\r\n  //   // Загрузка пользователей, админов и слов из API (здесь можно заменить на реальные запросы)\r\n  //   setUsers([{ id: 1, username: 'user1' }, { id: 2, username: 'user2' }]);\r\n  //   setAdmins([{ id: 1, username: 'admin1' }, { id: 2, username: 'admin2' }]);\r\n  //   setWords([{ id: 1, word: 'word1' }, { id: 2, word: 'word2' }]);\r\n  // }, []);\r\n\r\n  // const handleSubmit = async (event, type) => {\r\n  //   event.preventDefault();\r\n  //   let newData;\r\n  //   if (type === 'user') {\r\n  //     try {\r\n  //       const response = await fetch('/users/', {\r\n  //         method: 'POST',\r\n  //         headers: {\r\n  //           'Content-Type': 'application/json'\r\n  //         },\r\n  //         body: JSON.stringify(newUser)\r\n  //       });\r\n  //       if (!response.ok) throw new Error('Network response was not ok');\r\n  //       const user = await response.json();\r\n  //       setUsers([...users, user]);\r\n  //       setNewUser({ username: '' });\r\n  //     } catch (error) {\r\n  //       console.error('There has been a problem with your fetch operation:', error);\r\n  //     }\r\n  //   } else if (type === 'admin') {\r\n  //     try {\r\n  //       const response = await fetch('/admins/', {\r\n  //         method: 'POST',\r\n  //         headers: {\r\n  //           'Content-Type': 'application/json'\r\n  //         },\r\n  //         body: JSON.stringify(newAdmin)\r\n  //       });\r\n  //       if (!response.ok) throw new Error('Network response was not ok');\r\n  //       const admin = await response.json();\r\n  //       setAdmins([...admins, admin]);\r\n  //       setNewAdmin({ username: '' });\r\n  //     } catch (error) {\r\n  //       console.error('There has been a problem with your fetch operation:', error);\r\n  //     }\r\n  //   } else if (type === 'word') {\r\n  //     try {\r\n  //       const response = await fetch('/words/', {\r\n  //         method: 'POST',\r\n  //         headers: {\r\n  //           'Content-Type': 'application/json'\r\n  //         },\r\n  //         body: JSON.stringify(newWord)\r\n  //       });\r\n  //       if (!response.ok) throw new Error('Network response was not ok');\r\n  //       const word = await response.json();\r\n  //       setWords([...words, word]);\r\n  //       setNewWord({ word: '' });\r\n  //     } catch (error) {\r\n  //       console.error('There has been a problem with your fetch operation:', error);\r\n  //     }\r\n  //   }\r\n  // };\r\n  \r\n\r\n  // return (\r\n  //   <div className={styles.container}>\r\n  //     <h2>Admin Panel</h2>\r\n  //     <div className={styles.tabs}>\r\n  //       <button className={`${styles.tab} ${activeTab === 'users' ? styles.active : ''}`} onClick={() => setActiveTab('users')}>Users</button>\r\n  //       <button className={`${styles.tab} ${activeTab === 'admins' ? styles.active : ''}`} onClick={() => setActiveTab('admins')}>Admins</button>\r\n  //       <button className={`${styles.tab} ${activeTab === 'words' ? styles.active : ''}`} onClick={() => setActiveTab('words')}>Words</button>\r\n  //     </div>\r\n\r\n  //     {activeTab === 'users' && (\r\n  //       <>\r\n  //         <form onSubmit={(e) => handleSubmit(e, 'user')} className={styles.form}>\r\n  //           <input\r\n  //             type=\"text\"\r\n  //             name=\"username\"\r\n  //             placeholder=\"Username\"\r\n  //             value={newUser.username}\r\n  //             onChange={(e) => setNewUser({ username: e.target.value })}\r\n  //             className={styles.input}\r\n  //           />\r\n  //           <button type=\"submit\" className={styles.button}>Add User</button>\r\n  //         </form>\r\n  //         <table className={styles.table}>\r\n  //           <thead>\r\n  //             <tr>\r\n  //               <th>ID</th>\r\n  //               <th>Username</th>\r\n  //               <th>Actions</th>\r\n  //             </tr>\r\n  //           </thead>\r\n  //           <tbody>\r\n  //             {users.map(user => (\r\n  //               <tr key={user.id}>\r\n  //                 <td>{user.id}</td>\r\n  //                 <td>{user.username}</td>\r\n  //                 <td>\r\n  //                   <button className={styles.actionButton}>Edit</button>\r\n  //                   <button className={styles.actionButton}>Delete</button>\r\n  //                 </td>\r\n  //               </tr>\r\n  //             ))}\r\n  //           </tbody>\r\n  //         </table>\r\n  //       </>\r\n  //     )}\r\n\r\n  //     {activeTab === 'admins' && (\r\n  //       <>\r\n  //         <form onSubmit={(e) => handleSubmit(e, 'admin')} className={styles.form}>\r\n  //           <input\r\n  //             type=\"text\"\r\n  //             name=\"username\"\r\n  //             placeholder=\"Username\"\r\n  //             value={newAdmin.username}\r\n  //             onChange={(e) => setNewAdmin({ username: e.target.value })}\r\n  //             className={styles.input}\r\n  //           />\r\n  //           <button type=\"submit\" className={styles.button}>Add Admin</button>\r\n  //         </form>\r\n  //         <table className={styles.table}>\r\n  //           <thead>\r\n  //             <tr>\r\n  //               <th>ID</th>\r\n  //               <th>Username</th>\r\n  //               <th>Actions</th>\r\n  //             </tr>\r\n  //           </thead>\r\n  //           <tbody>\r\n  //             {admins.map(admin => (\r\n  //               <tr key={admin.id}>\r\n  //                 <td>{admin.id}</td>\r\n  //                 <td>{admin.username}</td>\r\n  //                 <td>\r\n  //                   <button className={styles.actionButton}>Edit</button>\r\n  //                   <button className={styles.actionButton}>Delete</button>\r\n  //                 </td>\r\n  //               </tr>\r\n  //             ))}\r\n  //           </tbody>\r\n  //         </table>\r\n  //       </>\r\n  //     )}\r\n\r\n  //     {activeTab === 'words' && (\r\n  //       <>\r\n  //         <form onSubmit={(e) => handleSubmit(e, 'word')} className={styles.form}>\r\n  //           <input\r\n  //             type=\"text\"\r\n  //             name=\"word\"\r\n  //             placeholder=\"Word\"\r\n  //             value={newWord.word}\r\n  //             onChange={(e) => setNewWord({ word: e.target.value })}\r\n  //             className={styles.input}\r\n  //           />\r\n  //           <button type=\"submit\" className={styles.button}>Add Word</button>\r\n  //         </form>\r\n  //         <table className={styles.table}>\r\n  //           <thead>\r\n  //             <tr>\r\n  //               <th>ID</th>\r\n  //               <th>Word</th>\r\n  //               <th>Actions</th>\r\n  //             </tr>\r\n  //           </thead>\r\n  //           <tbody>\r\n  //             {words.map(word => (\r\n  //               <tr key={word.id}>\r\n  //                 <td>{word.id}</td>\r\n  //                 <td>{word.word}</td>\r\n  //                 <td>\r\n  //                   <button className={styles.actionButton}>Edit</button>\r\n  //                   <button className={styles.actionButton}>Delete</button>\r\n  //                 </td>\r\n  //               </tr>\r\n  //             ))}\r\n  //           </tbody>\r\n  //         </table>\r\n  //       </>\r\n  //     )}\r\n  //   </div>\r\n  // );\r\n}\r\n\r\nexport default AdminPanel;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC;IAAEe,QAAQ,EAAE;EAAG,CAAC,CAAC;EACxD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC;IAAEe,QAAQ,EAAE;EAAG,CAAC,CAAC;EAC1D,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC;IAAEoB,IAAI,EAAE;EAAG,CAAC,CAAC;EAEpD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,OAAO,CAAC;EAEnD,MAAM,CAACuB,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC2B,KAAK,EAAEC,QAAQ,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM6B,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzBC,KAAK,CAAC,sCAAsC,CAAC,CACxCC,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDJ,IAAI,CAACR,IAAI,IAAI;MACVC,OAAO,CAACD,IAAI,CAAC;MACbG,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDU,KAAK,CAACT,KAAK,IAAI;MACZC,QAAQ,CAACD,KAAK,CAAC;MACfD,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACR,CAAC;EAEDG,MAAM,CAAC,CAAC;EAER,oBACEzB,OAAA;IAAAiC,QAAA,EACKd,IAAI,IAAIA,IAAI,CAACe,GAAG,CAACC,IAAI,iBAClBnC,OAAA;MAAAiC,QAAA,EAAoBE,IAAI,CAACC;IAAI,GAAnBD,IAAI,CAACE,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAkB,CAAC,CAAC;IACxC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;;EAGR;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAACvC,EAAA,CAnOQD,UAAU;AAAAyC,EAAA,GAAVzC,UAAU;AAqOnB,eAAeA,UAAU;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}