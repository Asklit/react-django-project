{"ast":null,"code":"var _jsxFileName = \"/Users/asklit/Documents/frontend/reactProject/frontend/src/Components/Words.jsx\";\nimport React from \"react\";\nimport styles from \"../styles/words.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Words = ({\n  word,\n  translate\n}) => {\n  const textToType = \"Это пример текста для ввода.\";\n  const textElement = document.getElementById(\"text-to-type\");\n  const userInput = document.getElementById(\"user-input\");\n  const result = document.getElementById(\"result\");\n  textElement.textContent = textToType;\n  userInput.addEventListener(\"input\", () => {\n    const inputValue = userInput.value;\n    if (inputValue === textToType) {\n      result.textContent = \"Поздравляем! Вы завершили ввод.\";\n      userInput.disabled = true; // Отключаем поле ввода\n    } else if (textToType.startsWith(inputValue)) {\n      result.textContent = \"\"; // Очистить результат\n      userInput.style.borderColor = \"green\"; // Успешный ввод\n    } else {\n      userInput.style.borderColor = \"red\"; // Ошибка в вводе\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"text-to-type\",\n      className: styles.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"user-input\",\n      placeholder: \"\\u041D\\u0430\\u0447\\u043D\\u0438\\u0442\\u0435 \\u043F\\u0435\\u0447\\u0430\\u0442\\u0430\\u0442\\u044C...\",\n      autofocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = Words;\nexport default Words;\nvar _c;\n$RefreshReg$(_c, \"Words\");","map":{"version":3,"names":["React","styles","jsxDEV","_jsxDEV","Words","word","translate","textToType","textElement","document","getElementById","userInput","result","textContent","addEventListener","inputValue","value","disabled","startsWith","style","borderColor","class","container","children","id","className","text","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","autofocus","_c","$RefreshReg$"],"sources":["/Users/asklit/Documents/frontend/reactProject/frontend/src/Components/Words.jsx"],"sourcesContent":["import React from \"react\";\nimport styles from \"../styles/words.module.css\";\n\nconst Words = ({ word, translate }) => {\n  const textToType = \"Это пример текста для ввода.\";\n  const textElement = document.getElementById(\"text-to-type\");\n  const userInput = document.getElementById(\"user-input\");\n  const result = document.getElementById(\"result\");\n\n  textElement.textContent = textToType;\n\n  userInput.addEventListener(\"input\", () => {\n    const inputValue = userInput.value;\n\n    if (inputValue === textToType) {\n      result.textContent = \"Поздравляем! Вы завершили ввод.\";\n      userInput.disabled = true; // Отключаем поле ввода\n    } else if (textToType.startsWith(inputValue)) {\n      result.textContent = \"\"; // Очистить результат\n      userInput.style.borderColor = \"green\"; // Успешный ввод\n    } else {\n      userInput.style.borderColor = \"red\"; // Ошибка в вводе\n    }\n  });\n\n  return (\n    <div class={styles.container}>\n        <div id=\"text-to-type\" className={styles.text}></div>\n        <input type=\"text\" id=\"user-input\" placeholder=\"Начните печатать...\" autofocus />\n        <div id=\"result\"></div>\n    </div>\n  );\n};\n\nexport default Words;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,KAAK,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAU,CAAC,KAAK;EACrC,MAAMC,UAAU,GAAG,8BAA8B;EACjD,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;EAC3D,MAAMC,SAAS,GAAGF,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;EACvD,MAAME,MAAM,GAAGH,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;EAEhDF,WAAW,CAACK,WAAW,GAAGN,UAAU;EAEpCI,SAAS,CAACG,gBAAgB,CAAC,OAAO,EAAE,MAAM;IACxC,MAAMC,UAAU,GAAGJ,SAAS,CAACK,KAAK;IAElC,IAAID,UAAU,KAAKR,UAAU,EAAE;MAC7BK,MAAM,CAACC,WAAW,GAAG,iCAAiC;MACtDF,SAAS,CAACM,QAAQ,GAAG,IAAI,CAAC,CAAC;IAC7B,CAAC,MAAM,IAAIV,UAAU,CAACW,UAAU,CAACH,UAAU,CAAC,EAAE;MAC5CH,MAAM,CAACC,WAAW,GAAG,EAAE,CAAC,CAAC;MACzBF,SAAS,CAACQ,KAAK,CAACC,WAAW,GAAG,OAAO,CAAC,CAAC;IACzC,CAAC,MAAM;MACLT,SAAS,CAACQ,KAAK,CAACC,WAAW,GAAG,KAAK,CAAC,CAAC;IACvC;EACF,CAAC,CAAC;EAEF,oBACEjB,OAAA;IAAKkB,KAAK,EAAEpB,MAAM,CAACqB,SAAU;IAAAC,QAAA,gBACzBpB,OAAA;MAAKqB,EAAE,EAAC,cAAc;MAACC,SAAS,EAAExB,MAAM,CAACyB;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrD3B,OAAA;MAAO4B,IAAI,EAAC,MAAM;MAACP,EAAE,EAAC,YAAY;MAACQ,WAAW,EAAC,gGAAqB;MAACC,SAAS;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjF3B,OAAA;MAAKqB,EAAE,EAAC;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAACI,EAAA,GA7BI9B,KAAK;AA+BX,eAAeA,KAAK;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}